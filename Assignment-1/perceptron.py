# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14B1MBniYokiYVr2fHw2I94rb1DNCey77
"""

# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b6RTv01c8U_5BMkNW7VoRS-rsJ2SXINf
"""

# -*- coding: utf-8 -*-
"""perceptron.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fCJFuy9JR9rwbGvP8kUb2Liy0VB73ySj
"""

from numpy.random import random_sample
from math import exp
import numpy as np

class Perceptron(object):

    def __init__(self, no_of_inputs,activation):
        self.w = random_sample(no_of_inputs + 1) # R, G, B + bias
        self.lr = 0.001
        self.bias = float(1)
        self.activation=activation

    def weight_adjustment(self, inputs, error):
        for x in range(len(inputs)):
            self.w[x] = self.w[x] + (self.lr * inputs[x] * error)
        self.w[-1] = self.w[-1] + (self.lr * error)

    def result(self, inputs,activation):
        value = 0
        for x in range(len(inputs)):
            value += inputs[x] * self.w[x]
        value += self.bias * self.w[-1]
        
         # Activation Function Code

        if activation=="SIGMOID":
            #print("SIGMIOD used as activation")
            return round(1/(1+exp(-value)))
        if activation=="BinaryStep":
            if value>0:
                #print("BinaryStep used as activation")
                return 1
            else:
                #print("BinaryStep used as activation")
                return 0
        if activation=="ReLU":
            if value>=0:
                #print("ReLU used as activation")
                return value
            else:
                #print("ReLU used as activation")
                return 0.01*value
      

      

    def recall(self, inputs,activation):
        res = self.result(inputs,activation)
        if res > 0.5:return 1
        elif res <= 0.5: return 0
        else: return 'FAIL'